<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>2ag6網站: (<a class="Link--inTextBlock" href="https://mdecd2025.github.io/2a-ag6/">https://mdecd2025.github.io/2a-ag6/</a>)</p>
<p>2ag6作業倉儲: (<a href="https://github.com/mdecd2025/2a-ag6">https://github.com/mdecd2025/2a-ag6</a>)</p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>task</h1>
<h2>task1</h2>
<h2>task2</h2>
<h2>task3</h2>
<h1>w3</h1>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 從  Brython 程式庫中的 browser 導入 html, 可用來輸出超文件內容
# 而所導入的 document 可以指向網頁中的特定 id 內容
from browser import html, document
# 建立 url 變數與網站中 2a 學員的學號與帳號資料 URL 網誌字串對應
url = "https://mde.tw/list/2a.txt"
# 利用 open() 物件中的 readlines() 方法, 取出網站中的資料並逐行放入數列中, 因此 data 的資料型別為數列
data = open(url).readlines()
# 進行資料查驗時, 印出 data 數列內容
#print(data)
# 因為學員資料中的第一列為標題, 因此有效資料從索引值 1 開始
all_stud = data[1:]
# 利用 len() 函式查驗 all_stud 數列有幾筆資料, 因為要與前後的字串併接, 因此利用 str() 將整數轉為字串
print("總共有 " + str(len(all_stud)) + "名學員")
# 
# 利用 document[] 取得 id 為 "brython_div1" 的位置, 然後與 brython_div1 變數對應
brython_div1 = document["brython_div1"]
# 利用 Brython 的 "&lt;=" 特殊符號, 將右值帶有字串與超文件內容物件插入 brython_div1 變數所指定的位置
# 其中利用 html.A 建立 anchor 標註物件, 第一個變數為 anchor 字串, 第二個變數則為 hyper text reference
brython_div1 &lt;= "1. " + html.A("2a-ag6", href="https://mdecd2025.github.io/2a-ag6/")+ html.A("(repo)", href="https://github.com/mdecd2025/2a-ag6")
# 利用 html.BR() 插入 break 標註
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "2. " + html.A("41223110", href="https://mdecd2025.github.io/hw-41223110/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223110")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "3. " + html.A("41223125", href="https://mdecd2025.github.io/hw-Linjiahong41223125/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-Linjiahong41223125")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "4. " + html.A("41223129", href="https://mdecd2025.github.io/hw-hong41223129/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-hong41223129")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "5. " + html.A("41223132", href="https://mdecd2025.github.io/hw-CHN41223132/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-CHN41223132")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "6. " + html.A("41223133", href="https://mdecd2025.github.io/hw-41223133/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223133")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "7. " + html.A("41223147", href="https://mdecd2025.github.io/hw-41223147/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223147")
</pre>
<p><span>1. </span><a href="https://mdecd2025.github.io/2a-ag6/">2a-ag6</a><a href="https://github.com/mdecd2025/2a-ag6">(repo)</a><br/><span>2. </span><a href="https://mdecd2025.github.io/hw-41223110/">41223110</a><a href="https://github.com/mdecd2025/hw-41223110">(repo)</a><br/><span>3. </span><a href="https://mdecd2025.github.io/hw-Linjiahong41223125/">41223125</a><a href="https://github.com/mdecd2025/hw-Linjiahong41223125">(repo)</a><br/><span>4. </span><a href="https://mdecd2025.github.io/hw-hong41223129/">41223129</a><a href="https://github.com/mdecd2025/hw-hong41223129">(repo)</a><br/><span>5. </span><a href="https://mdecd2025.github.io/hw-CHN41223132/">41223132</a><a href="https://github.com/mdecd2025/hw-CHN41223132">(repo)</a><br/><span>6. </span><a href="https://mdecd2025.github.io/hw-41223133/">41223133</a><a href="https://github.com/mdecd2025/hw-41223133">(repo)</a><br/><span>7. </span><a href="https://mdecd2025.github.io/hw-41223147/">41223147</a><a href="https://github.com/mdecd2025/hw-41223147">(repo)</a></p>
<h1>w5</h1>
<h4 data-end="11" data-start="0">1. 用繁體中文詳細說明下列資料</h4>
<p data-end="239" data-start="118">Webots 是一個開放源碼的機器人仿真軟體，它允許用戶進行機器人設計、測試和模擬。其主要特點是支援多種機器人平台，提供物理引擎來模擬現實世界的物理條件，如碰撞、重力、摩擦等。Webots 主要應用於機器人學習、機器人控制、機器人設計等領域。</p>
<p data-end="277" data-start="241">這篇簡介介紹了 Webots 的核心功能和使用方法，涵蓋了以下幾個要點：</p>
<ul data-end="695" data-start="279">
<li data-end="357" data-start="279">
<p data-end="357" data-start="281"><strong data-end="290" data-start="281">機器人模型</strong>：Webots 提供了一些預先設計的機器人模型，這些模型可以用來直接進行仿真或根據需求進行修改。這些機器人包括四輪驅動車、機械手臂等。</p>
</li>
<li data-end="409" data-start="361">
<p data-end="409" data-start="363"><strong data-end="371" data-start="363">場景設置</strong>：用戶可以根據需要構建複雜的環境場景，包括各種靜態物體、動態物體、傳感器等。</p>
</li>
<li data-end="490" data-start="411">
<p data-end="490" data-start="413"><strong data-end="422" data-start="413">控制和編程</strong>：Webots 支援多種編程語言來進行機器人控制，最常用的是 Python、C 和 C++。用戶可以通過編寫控制代碼來控制機器人的行為。</p>
</li>
<li data-end="551" data-start="492">
<p data-end="551" data-start="494"><strong data-end="505" data-start="494">視覺和數據分析</strong>：Webots 提供了強大的可視化工具來幫助用戶查看仿真過程中的數據和結果，並進行性能分析。</p>
</li>
<li data-end="632" data-start="553">
<p data-end="632" data-start="555"><strong data-end="563" data-start="555">物理引擎</strong>：Webots 使用高效的物理引擎來模擬現實世界的物理現象，如重力、碰撞、摩擦等。這使得仿真環境更接近現實，並有助於開發真實世界中的應用。</p>
</li>
<li data-end="695" data-start="634">
<p data-end="695" data-start="636"><strong data-end="644" data-start="636">可擴展性</strong>：Webots 是開放源碼的，並支援插件和擴展，因此用戶可以根據自己的需求擴展 Webots 的功能。</p>
</li>
</ul>
<h4 data-end="376" data-start="357">2. 重要英文單字與解釋及用法</h4>
<ul data-end="751" data-start="378">
<li data-end="435" data-start="378"><strong data-end="394" data-start="380">Simulation</strong>: 模擬，指用來模擬現實世界的過程或系統。在 Webots 中，指虛擬環境的運行。</li>
<li data-end="504" data-start="436"><strong data-end="453" data-start="438">Prototyping</strong>: 原型製作，指開發產品或系統的初步模型或版本。在 Webots 中，用來快速構建機器人的模型和功能。</li>
<li data-end="550" data-start="505"><strong data-end="521" data-start="507">Locomotion</strong>: 運動學，指機器人的移動方式，例如輪式、步態或飛行運動。</li>
<li data-end="596" data-start="551"><strong data-end="567" data-start="553">Controller</strong>: 控制器，指控制機器人行為的程式，通常是由使用者編寫的。</li>
<li data-end="640" data-start="597"><strong data-end="611" data-start="599">Actuator</strong>: 執行器，指機器人用來執行動作的裝置，如馬達、電動機等。</li>
<li data-end="684" data-start="641"><strong data-end="653" data-start="643">Sensor</strong>: 感測器，指機器人用來感知環境的裝置，如距離感測器、相機等。</li>
<li data-end="751" data-start="685"><strong data-end="712" data-start="687">Supervisor Controller</strong>: 監控控制器，具有執行高權限操作的能力，能夠進行像人類操作員一樣的模擬控制。</li>
</ul>
<h4 data-end="766" data-start="753">3.摘要出下列內容:</h4>
<p data-end="69" data-start="17"><strong data-end="69" data-start="17">Webots User Guide R2025a: Introduction to Webots</strong></p>
<p data-end="230" data-start="71">Webots 是一款專業的機器人仿真軟體，提供快速原型設計環境，讓使用者可以創建具有物理屬性（如質量、關節、摩擦係數等）的 3D 虛擬世界。使用者可以在 Webots 中創建被動或主動物體，並模擬不同的移動機構（如輪式、步態或飛行機器人）。這些機器人可以搭載各種傳感器和驅動裝置，並且可以透過程式編寫來展現所需的行為。</p>
<p data-end="374" data-start="232">Webots 支援的功能不僅限於機器人模擬，它還包含了多種與現實機器人連接的介面，使得當仿真機器人運行正常後，控制程式可以轉移至實際機器人進行控制。Webots 的應用範圍涵蓋了學術研究、移動機器人原型設計、機器人運動學研究、群體智能研究等領域，並且被廣泛應用於機器人競賽及教育領域。</p>
<p data-end="510" data-start="376">使用 Webots 需要具備一些基本的編程知識，通常是 C、C++、Java、Python 或 MATLAB 等語言，這些知識可用來編寫機器人的控制程式。如果使用者希望創建自定義的機器人模型或環境物體，則需要對 3D 計算機圖形學和 VRML97 描述語言有基本了解。</p>
<p data-end="600" data-start="512">Webots 提供了專業的付費用戶支援服務，並且社群支援也可以透過各種平台獲得，例如 Robotics StackExchange、GitHub 討論區和 Discord 等。</p>
<p data-end="742" data-start="602">Webots 模擬系統由多個組件組成，包括世界檔案（.wbt），控制器程式，以及可選的物理插件。世界檔案描述了機器人及其環境的屬性，而控制器程式則控制機器人的行為。Supervisor 控制器則是特別的控制器，可以執行需要高權限操作的任務，例如隨機移動機器人或錄製模擬過程的視頻。</p>
<h4 data-end="766" data-start="753">4. 逐句文法說明</h4>
<ul data-end="1536" data-start="768">
<li data-end="957" data-start="768">
<p data-end="840" data-start="770"><strong data-end="840" data-start="770">Webots is a professional mobile robot simulation software package.</strong></p>
<ul data-end="957" data-start="843">
<li data-end="870" data-start="843">"is" 為系統動詞，表明 Webots 的性質。</li>
<li data-end="957" data-start="873">"a professional mobile robot simulation software package" 是名詞短語，作為補語說明 Webots 的功能。</li>
</ul>
</li>
<li data-end="1289" data-start="959">
<p data-end="1129" data-start="961"><strong data-end="1129" data-start="961">It offers a rapid prototyping environment that allows the user to create 3D virtual worlds with physics properties such as mass, joints, friction coefficients, etc.</strong></p>
<ul data-end="1289" data-start="1132">
<li data-end="1162" data-start="1132">"offers" 是動詞，表示 Webots 提供某物。</li>
<li data-end="1225" data-start="1165">"a rapid prototyping environment" 是名詞短語，作為動詞 "offers" 的賓語。</li>
<li data-end="1289" data-start="1228">"that allows the user to create..." 為定語從句，修飾 "environment"。</li>
</ul>
</li>
<li data-end="1536" data-start="1291">
<p data-end="1471" data-start="1293"><strong data-end="1471" data-start="1293">Moreover, they may be equipped with a number of sensor and actuator devices, such as distance sensors, drive wheels, cameras, motors, touch sensors, emitters, receivers, etc.</strong></p>
<ul data-end="1536" data-start="1474">
<li data-end="1511" data-start="1474">"may be equipped" 為被動語態，表示設備可能被裝配上。</li>
<li data-end="1536" data-start="1514">"such as" 用來列舉具體的設備。</li>
</ul>
</li>
</ul>
<h4 data-end="2368" data-start="2336">5. 詳細說明如何手動方式在 Webots 建立下列場景</h4>
<p data-end="2400" data-start="2370">要手動在 Webots 中建立場景，您可以按照以下步驟進行：</p>
<ol data-end="2682" data-start="2402">
<li data-end="2432" data-start="2402"><strong data-end="2418" data-start="2405">啟動 Webots</strong>：開啟 Webots 軟體。</li>
<li data-end="2492" data-start="2433"><strong data-end="2457" data-start="2436">創建新世界 (New World)</strong>：選擇<span> </span><code data-end="2480" data-start="2461">File -&gt; New World</code>，創建一個新的仿真世界。</li>
<li data-end="2568" data-start="2493"><strong data-end="2506" data-start="2496">設置場景元素</strong>：在左側的“場景樹”中，您可以選擇添加不同的物體，如機器人、地面、障礙物等。選擇“Add”按鈕來添加物體，並選擇所需的物件。</li>
<li data-end="2604" data-start="2569"><strong data-end="2583" data-start="2572">配置機器人模型</strong>：選擇一個機器人模型，並配置其所需的參數。</li>
<li data-end="2643" data-start="2605"><strong data-end="2617" data-start="2608">設置傳感器</strong>：為您的機器人添加各種傳感器，如距離感測器、相機等。</li>
<li data-end="2682" data-start="2644"><strong data-end="2658" data-start="2647">保存並測試場景</strong>：設定完成後，保存場景並運行仿真來測試您的場景。</li>
</ol>
<h4 data-end="2368" data-start="2336">6. 手把手一步步說明如何利用圖形介面 menu 建立這個場景，有哪些要點必須特別注意？ 在 Webots 中使用圖形介面建立場景的步驟：</h4>
<p><strong>1.開啟 Webots 軟體</strong>，選擇 File -&gt; New World 開始建立新的仿真場景。</p>
<p><strong>2.添加物體</strong>：點擊左上方的“Add”按鈕，選擇需要的場景物體（例如地面、牆壁等）。每次添加後可以透過右側的屬性視窗來設置每個物體的具體參數。</p>
<p><strong>3. 創建機器人</strong>：在 Add -&gt; Robot 中選擇一個機器人模型，如差速車、機械手臂等，並為其設置適當的參數。</p>
<p><strong>4. 調整視角和環境</strong>：設置仿真環境的背景、光線等。</p>
<p><strong>5. 儲存場景</strong>：完成場景設置後，選擇 File -&gt; Save World 儲存當前的場景。</p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>